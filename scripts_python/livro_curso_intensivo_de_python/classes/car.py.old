#coding: utf-8

class Car():
    """ Classe que repesenta um carro."""
    def __init__(self, make, model, year):
        """ Inicializa os atribuitos que descrevem um carro."""
        self.make = make
        self.model = model
        self.year = year
        self.odemeter_reading = 0

    def get_descriptive_name(self):
        """ Devolve um nome descritivo, formatado de modo elegante."""
        long_name = self.make.title() + ' ' + self.model + ' ' + str(self.year) 
        return long_name

    def read_odemeter(self):
        """ 
        Exibe uma frase que mostra a milhagem do carro
        """
        print("This car has " + str(self.odemeter_reading) + " miles on it.")

    def update_odemeter(self, mileage):
        """
        Define o valor de leitura do hodômetro com o valor especificado.
        Rejeita a alteração se tiver uma tentativa de definir um valor menor para hodômetro
        """
        if mileage >= self.odemeter_reading:
            self.odemeter_reading = mileage
        else:
            print("You can't roll back an odometer!")

    def increment_odometer(self, miles):
        """
        Soma a quantidade especificada ao valor de leitura do hodômetro.
        """
        self.odemeter_reading += miles

#my_used_car = Car('subaru', 'outback', 2013)
#print(my_used_car.get_descriptive_name())

#my_used_car.update_odemeter(23500)
#my_used_car.read_odemeter()

#my_used_car.increment_odometer(100)
#my_used_car.read_odemeter()

#print("")

#my_new_car = Car('audi', 'A4', 2016)
#print(my_new_car.get_descriptive_name())

#""" Modificando o valor de um atributo diretamente """
#my_new_car.odemeter_reading = 23

#""" Modificando o valor de um atributo com um método """
#my_new_car.update_odemeter(30)

#my_new_car.read_odemeter()

